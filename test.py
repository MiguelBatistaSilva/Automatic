from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from webdriver_manager.chrome import ChromeDriverManager
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import time

# --- CONFIGURA√á√ÉO INICIAL ---

# Palavra-chave e texto esperado para TESTE
# ‚ö†Ô∏è Substitua 'itom' e o texto do artigo para cada cen√°rio que voc√™ quer testar!
PALAVRA_CHAVE_TESTE = "nomenclatura"
TEXTO_ESPERADO_NO_ARTIGO = "BC - Nomenclaturas dos Microcomputadores do Tribunal de Justi√ßa do Estado do Cear√°"
ID_CABECALHO_CLASSIFICACAO = "knowledgeSearch_shownValues_gridHdr1"

# ----------------------------------------------------------------------
# FUN√á√ÉO CENTRAL DE TESTE DA BASE DE CONHECIMENTO
# ----------------------------------------------------------------------
def testar_base_conhecimento_com_validacao():
    # --- 1. SOLICITA O LINK ---
    link_site = input("Por favor, insira o link do chamado/Assyst (ex: https://cati.tjce.jus.br/...): ").strip()
    if not link_site:
        print("‚ùå Link do Assyst n√£o fornecido. Encerrando.")
        return

    # --- 2. CONFIGURA O NAVEGADOR (Com Portabilidade) ---
    chrome_options = Options()
    chrome_options.add_argument("--start-maximized")
    chrome_options.add_experimental_option("detach", True)  # Mant√©m aberto para inspe√ß√£o

    try:
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=chrome_options)
    except Exception as e:
        print(f"‚ùå Erro ao iniciar o ChromeDriver: {e}")
        return

    # --- 3. INICIA E FAZ LOGIN MANUAL ---
    driver.get(link_site)
    print("‚öôÔ∏è Navegador aberto. Por favor, fa√ßa login e carregue o chamado manualmente...")

    # Espera at√© o bot√£o "Salvar" (btlogEvent) aparecer, indicando que o chamado carregou.
    try:
        WebDriverWait(driver, 600).until(
            EC.presence_of_element_located((By.ID, "btlogEvent"))
        )
        print("‚úÖ Chamado carregado! Iniciando teste de BK...")
    except TimeoutException:
        print("‚ùå Tempo limite esgotado (10 minutos). Chamado n√£o detectado. Encerrando.")
        driver.quit()
        return

    # ----------------------------------------------------------------------
    # FLUXO DA BASE DE CONHECIMENTO
    # ----------------------------------------------------------------------

    # -- A. ABRIR BK --
    try:
        conhecimento = WebDriverWait(driver, 15).until(
            EC.element_to_be_clickable((By.ID, "knowledgeMenu"))
        )
        conhecimento.click()
        print("‚úÖ Clicado no bot√£o/menu 'Conhecimento'.")
        # Espera o campo de Palavra-chave aparecer no modal
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "NONE_knowledgeProcedure_lookup_query"))
        )
    except Exception as e:
        print(f"‚ùå FALHA na A: Erro ao abrir BK: {e}")
        return

    # -- B. PESQUISAR --
    try:
        campo_bk = driver.find_element(By.ID, "NONE_knowledgeProcedure_lookup_query")
        campo_bk.clear()
        campo_bk.send_keys(PALAVRA_CHAVE_TESTE)

        botao_pesquisar_bk = driver.find_element(By.ID, "btSearch")
        botao_pesquisar_bk.click()
        print(f"‚úÖ Pesquisa por '{PALAVRA_CHAVE_TESTE}' iniciada.")

        # Espera a primeira linha da tabela de resultados carregar
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located(
                (By.XPATH, "//div[contains(@class, 'dojoxGridRow') and contains(@class, 'rowId0')]"))
        )

    except Exception as e:
        print(f"‚ùå FALHA na B: Erro na pesquisa da BK: {e}")
        return

    # -- C. REORDENAR A TABELA (Double Click no Cabe√ßalho) --
    try:
        cabecalho_classificacao = WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.ID, "knowledgeSearch_shownValues_gridHdr1"))
        )

        actions = ActionChains(driver)
        actions.double_click(cabecalho_classificacao).perform()

        print("‚úÖ Reordena√ß√£o da tabela conclu√≠da.")

    except Exception as e:
        print(f"‚ùå Erro ao reordenar a tabela: {e}")

    # -- C. VALIDA√á√ÉO DO ARTIGO (NOVO PASSO CR√çTICO) --
    try:
        # XPATH para pegar o texto da c√©lula na coluna do t√≠tulo/resumo da linha rowId1 (Segundo Artigo)
        # O seletor exato da coluna pode variar (geralmente √© a segunda ou terceira c√©lula)
        # Vamos tentar o XPath gen√©rico para a linha e pegar o texto da linha inteira
        # rowId2 √© a terceira
        xpath_linha_validacao = "//div[contains(@class, 'dojoxGridRow') and contains(@class, 'rowId1')]"
        linha_artigo_element = driver.find_element(By.XPATH, xpath_linha_validacao)

        # Pega o texto de TODAS as colunas da linha
        texto_completo_da_linha = linha_artigo_element.text

        if TEXTO_ESPERADO_NO_ARTIGO in texto_completo_da_linha:
            print("=========================================================")
            print(f"üéâ SUCESSO! O artigo correto foi encontrado na linha 'rowId1'.")
            print(f"   -> Texto esperado: '{TEXTO_ESPERADO_NO_ARTIGO}'")
            print("=========================================================")
        else:
            print("=========================================================")
            print(f"‚ùå FALHA NA VALIDA√á√ÉO! O artigo esperado N√ÉO foi encontrado.")
            print(f"   -> Palavra-chave: '{PALAVRA_CHAVE_TESTE}'")
            print(f"   -> Texto esperado: '{TEXTO_ESPERADO_NO_ARTIGO}'")
            print(f"   -> Texto encontrado na linha 'rowId1': '{texto_completo_da_linha}'")
            print("=========================================================")
            # Se a valida√ß√£o falhar, podemos parar aqui para inspe√ß√£o
            return

    except Exception as e:
        print(f"‚ùå FALHA na C: Erro ao tentar validar o artigo 'rowId1'. O artigo pode n√£o existir. Erro: {e}")
        return

    # -- D. APLICA√á√ÉO (Simula√ß√£o do restante do fluxo) --
    try:
        # 1. Clique com o bot√£o direito na linha validada (rowId1)
        actions = ActionChains(driver)
        actions.context_click(linha_artigo_element).perform()

        # 2. Espera o menu de contexto e clica em 'A√ß√£o de Solu√ß√£o de Conhecimento'
        xpath_menu_item = "//div[contains(@class, 'dijitMenuItem') and .//span[text()='A√ß√£o de Solu√ß√£o de Conhecimento']]"
        acao_solucao = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, xpath_menu_item))
        )
        acao_solucao.click()

        print("\n‚úÖ Artigo selecionado e menu 'A√ß√£o de Solu√ß√£o' clicado.")
        time.sleep(5)  # Pausa para voc√™ inspecionar o resultado final

    except Exception as e:
        print(f"‚ùå FALHA na D: Erro ao aplicar a Base de Conhecimento: {e}")


# --- EXECU√á√ÉO ---
if __name__ == '__main__':
    testar_base_conhecimento_com_validacao()